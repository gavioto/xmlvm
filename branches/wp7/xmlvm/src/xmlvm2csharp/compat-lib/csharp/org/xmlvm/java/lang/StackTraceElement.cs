// Automatically generated by xmlvm2csharp (Do not edit).

using org.xmlvm;
using java = org.xmlvm.java;
namespace org.xmlvm.java.lang {
public class StackTraceElement: org.xmlvm.java.lang.Object {
private java.lang.String _fdeclaringClass;

private java.lang.String _fmethodName;

private java.lang.String _ffileName;

private int _flineNumber;

public void @this(java.lang.String n1, java.lang.String n2, java.lang.String n3, int n4){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: void <init>(java.lang.String, java.lang.String, java.lang.String, int)]
_declaringClass = n1;
_methodName = n2;
_fileName = n3;
_lineNumber = n4;
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: void <init>(java.lang.String, java.lang.String, java.lang.String, int)]
}

public override bool equals(java.lang.Object n1){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: boolean equals(java.lang.Object)]

if (n1==this) return true;
if (n1==null) return false;

StackTraceElement _other = null;
try {
    _other = (StackTraceElement) n1;
} catch(global::System.Exception) {
    return false;
}

if (_other._lineNumber != _lineNumber) return false;
java.lang.String _otherFileName = _other._fileName;
if ((_otherFileName!=_fileName) && (_fileName==null || _fileName.equals(_otherFileName))) return false;

java.lang.String _otherMethodName = _other._methodName;
if ((_otherMethodName!=_methodName) && (_methodName==null || _methodName.equals(_otherMethodName))) return false;

java.lang.String _otherDeclaringClass = _other._declaringClass;
if ((_otherDeclaringClass!=_declaringClass) && (_declaringClass==null || _declaringClass.equals(_otherDeclaringClass))) return false;

return true;

//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: boolean equals(java.lang.Object)]
}

public virtual global::System.Object getClassName(){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String getClassName()]
return _declaringClass;
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String getClassName()]
}

public virtual global::System.Object getFileName(){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String getFileName()]
return _fileName;
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String getFileName()]
}

public virtual int getLineNumber(){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: int getLineNumber()]
return _lineNumber;
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: int getLineNumber()]
}

public virtual global::System.Object getMethodName(){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String getMethodName()]
return _methodName;
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String getMethodName()]
}

public override int hashCode(){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: int hashCode()]
throw new org.xmlvm._nNotYetImplementedException();
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: int hashCode()]
}

public virtual bool isNativeMethod(){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: boolean isNativeMethod()]
throw new org.xmlvm._nNotYetImplementedException();
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: boolean isNativeMethod()]
}

public override global::System.Object toString(){
//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String toString()]
throw new org.xmlvm._nNotYetImplementedException();
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement: java.lang.String toString()]
}

//XMLVM_BEGIN_WRAPPER[org.xmlvm.java.lang.StackTraceElement]
private java.lang.String _declaringClass;
private java.lang.String _methodName;
private java.lang.String _fileName;
private int _lineNumber;
//XMLVM_END_WRAPPER[org.xmlvm.java.lang.StackTraceElement]

} // end of class: StackTraceElement

} // end of namespace: org.xmlvm.java.lang
